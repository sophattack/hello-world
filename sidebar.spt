#-- Start Entry --#
insert = SearchType.create('config/widget_config')
insert.set_value('category', """CustomLayoutWdg""")
insert.set_value('config', """<config>
<job.home.user.sidebar>
<mako>
<![CDATA[
from pyasm.common import SPTDate, Environment, jsondumps
from pyasm.search import Search
from pyasm.web import DivWdg
from pyasm.biz import Task

from spt.modules.workflow import SidebarTaskItem, SidebarTaskItem3

from datetime import datetime, timedelta
from dateutil import parser

from tactic_client_lib import TacticServerStub
user = Environment.get_user_name()
job_code = kwargs.get("job_code")

# we want to get the task filter expression from the arguments.
expression = kwargs.get("expression")

server = TacticServerStub.get()
tasks = server.eval(expression)

if kwargs.get("current_task_code") and kwargs.get("current_task_code") != "":
    current_task_code = kwargs.get("current_task_code")
elif tasks:
    current_task_code = tasks[0].get("code")
else:
    current_task_code = None
kwargs['current_task_code'] = current_task_code


if len(tasks) &gt;= 1:
    sidebar_display = "inline-block"
else:
    sidebar_display = "none"
# overwritten for now
sidebar_display = "inline-block"


tasks_div = DivWdg()
tasks_div.add_class("spt_sections_container")

last_group = ""

processes = []
job_codes = []
task_codes = []

statuses = Task.get_status_colors().get("task")

default_statuses = {status: status not in ["Complete", "Approved", "Waiting", "Assignment"] for status in statuses}

for task in tasks:
    #code = task.get_code()
    code = task.get("code")

    #end_date  = task.get_datetime_value("bid_end_date")
    end_date = task.get("bid_end_date")
    if end_date:
        end_date = parser.parse(end_date)

    parent_code = task.get("search_code")
    parent_task_code = task.get("parent_task_code")
    #status = task.get_value("status")
    status = task.get("status")
    color = statuses.get(status)
    #process = task.get_value("process")
    process = task.get("process")
    
    if parent_task_code and parent_task_code != "":
        continue
    
    if not end_date:
        continue
    
    subjob = Search.get_by_code("workflow/job", parent_code)
    job_code = subjob.get_value("parent_code")
    if job_code:
        job = Search.get_by_code("workflow/job", job_code)
    else:
        job = subjob
        subjob = None
    job_code = job.get_code()
    job_name = job.get_value("name")
    
    processes.append(process)
    job_codes.append(job_code)
    task_codes.append(code)

    now = SPTDate.now()

    if now - end_date &gt; timedelta(days=1):
        group = "Overdue"
    else:
        currDate = end_date.date()
        group = end_date.strftime("%B %d, %Y")
        

    if group != last_group:
        section_div = DivWdg()
        tasks_div.add(section_div)
        section_div.add_class("spt_task_section")
        section_div.add_attr("spt_task_group", group)
        
        group_div = DivWdg()
        section_div.add(group_div)
        group_div.add_class("spt_task_group")
        group_div.add_class("vertical-centered")
        group_div.add(group)
        
    last_group = group
    
    
    search_key = task.get("__search_key__")
    task_div = SidebarTaskItem3(search_key=search_key, subjob=subjob, job=job, color=color).get_display()
    section_div.add(task_div)

    task_div.add_attr("spt_search_key", search_key)
    task_div.add_attr("spt_task_code", code)
    task_div.add_attr("spt_status", status)
    task_div.add_attr("spt_process", process)
    task_div.add_attr("spt_job_code", job_code)
    task_div.add_attr("spt_task_group", last_group)


# MUST get styles from item as well
task_item_styles = SidebarTaskItem3().get_styles().get_buffer_display()
html = tasks_div.get_buffer_display()
if len(tasks) == 0:
    html = "&lt;div class='full-centered' style='font-size: 20px; height: 100%; color: lightgrey'&gt;No Assigned Tasks&lt;/div&gt;"
    html = "&lt;div class='full-centered' style='font-size: 18px; height: 100%; color: lightgrey; flex-direction: column'&gt;&lt;div style='font-size: 80px; margin-bottom: 5px;'&gt;&lt;i class='fa fa-exclamation-circle'&gt;&lt;/i&gt;&lt;/div&gt;No tasks&lt;/div&gt;"
    kwargs['no_tasks'] = True

update_div = DivWdg()
update_div.add_update( {
   'search_type': "sthpw/task",
   'compare': "@COUNT(sthpw/login['login', '%s'].sthpw/task) == %s" % (user, len(tasks)),
   'cbjs_action': '''
   
   var sidebarTop = bvr.src_el.getParent(".spt_sidebar_top");
   spt.panel.refresh(sidebarTop);
   
   '''})
   
update_html = update_div.get_buffer_display()

kwargs['status_colors'] = statuses
kwargs['task_codes'] = task_codes

job_codes_string = jsondumps(job_codes)
statuses_string = jsondumps(statuses)
tasks_string = jsondumps(processes)

kwargs['default_statuses'] = default_statuses
default_statuses = jsondumps(default_statuses)
]]>
</mako>
<html>
<div class="spt_sidebar_top spt_window_resize" spt_window_resize_offset="128" style="display: ${sidebar_display}">
  <div style="width: 100%; margin: 0px 0px;">
    <div class="spt_sidebar">
      <div class="spt_sidebar_toolbar">
        <div class="spt_sidebar_toolbar_right vertical-centered">
          <div class="spt_filter_container" style="display: flex;">
            <div class="toolbar-icon active-icon full-centered spt_task_filter hand" title="Filters">
              <i class="fa fa-filter">
            </i>
            </div>
            <div class="toolbar-icon full-centered spt_cancel_filter hand" style="display: none" title="Cancel filters">
              <i class="fa fa-times-circle">
            </i>
            </div>
          </div>
          <div class="spt_task_filter_dropdown" style="display: none">
            <div class="spt_task_filter_header">
              <div class="spt_filter_tab_header hand tab-header selected-header" spt_tab_class="spt_status_tab">Status</div>
              <div class="spt_filter_tab_header hand tab-header" spt_tab_class="spt_task_tab">Task</div>
              <div class="spt_filter_tab_header hand tab-header" spt_tab_class="spt_job_tab">Job</div>
            </div>
            <element class="spt_filter_tab spt_status_tab tab-content selected-tab">
              <display class="tactic.ui.panel.CustomLayoutWdg">
                <view>job.home.user.dropdown_tab</view>
                <attribute>spt_status</attribute>
                <filters>${statuses_string}</filters>
                <defaults>${default_statuses}</defaults>
              </display>
            </element>
            <element class="spt_filter_tab spt_task_tab tab-content">
              <display class="tactic.ui.panel.CustomLayoutWdg">
                <view>job.home.user.dropdown_tab</view>
                <attribute>spt_process</attribute>
                <filters>${tasks_string}</filters>
              </display>
            </element>
            <element class="spt_filter_tab spt_job_tab tab-content">
              <display class="tactic.ui.panel.CustomLayoutWdg">
                <view>job.home.user.dropdown_tab</view>
                <attribute>spt_job_code</attribute>
                <filters>${job_codes_string}</filters>
              </display>
            </element>
          </div>
          <div style="margin: 0 4px;">Due Date:</div>
          <div title="Sort date" class="toolbar-icon active-icon full-centered spt_task_sort hand">
            <i class="fa fa-sort">
            </i>
          </div>
        </div>
        <div class="toolbar-icon full-centered active-icon spt_hide_sidebar hand" title="Hide Sidebar" style="border-left: 1px solid #ccc">
          <i class="fa fa-caret-left">
            </i>
        </div>
      </div>
      <div class="spt_sidebar_items spt_window_resize sidebar-items" spt_window_resize_offset="158">${task_item_styles}${html}</div>
    </div>
  </div>
  <div class="spt_update_div">${update_html}</div>
</div>
<style type="text/css">
.spt_task_item {
   /*margin: 5px 0px;*/
}


.spt_sidebar_top {
  
}

.spt_sidebar {
  width: 300px;
  display: inline-block;
  border: solid 1px #DDD;
  background: #FFF;
  margin: 0px 0px;
  border-top: 0px;

  overflow-x: hidden;
  transition: 0.5s; 
  position: fixed;
  z-index: 5;
  top: 128;
  left: 0;
}

.spt_sidebar .vertical-centered {
  display: flex;
  align-items: center;
}

.spt_sidebar .full-centered {
  display: flex;
  align-items: center;
  justify-content: center;
}

.spt_sidebar .spt_sidebar_toolbar {
  display: flex;
  align-items: center;
  justify-content: space-between;
  height: 28px;
  font-size: 13px;
  font-weight: bold;
  border-bottom: 1px solid #ccc;
}

.spt_sidebar_toolbar_right {
  padding: 0px 6px;
  position: relative;
  height: 24px;
  min-width: 150px;
}

.spt_sidebar_toolbar .toolbar-icon {
  color: grey;
  width: 20px;
  height: 100%;
  border-radius: 2px;
}

.spt_sidebar_toolbar .spt_hide_sidebar.toolbar-icon {
  border-radius: 0px;
}

.spt_sidebar_toolbar .active-icon:hover {
  background-color: rgb(238, 238, 238);
}

.spt_sidebar_toolbar .toolbar-icon.spt_task_sort {
  font-size: 15px;
}

.spt_sidebar .spt_task_group {
  font-size: 14px;
  background: #fafafa;
  height: 30px;
  box-sizing: border-box;
  padding-left: 6px;
  border-bottom: 1px solid #ccc;
}

.spt_sidebar .spt_task_filter_dropdown {
  position: absolute;
  border: 1px solid #e1e1e1;
  top: 24;
  background: white;
  font-weight: normal;
  border-radius: 2px;
  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.05);
  z-index: 2;
}

.spt_sidebar .spt_task_filter_header{
  display: flex;
}

.spt_sidebar .spt_task_filter_dropdown .tab-header {
  padding: 5px 10px 0px;
  width: 50px;
  text-align: center;
}

.spt_sidebar .spt_task_filter_dropdown .tab-header:hover {
  background: rgb(238, 238, 238);
}

.spt_sidebar .spt_task_filter_dropdown .tab-header.selected-header {
  border-bottom: 2px solid grey;
}

.spt_sidebar .spt_task_filter_dropdown .tab-content {
  display: none;
}

.spt_sidebar .spt_task_filter_dropdown .tab-content.selected-tab {
  display: block;
}

.spt_sidebar .sidebar-items {
  overflow-y: auto;
}
</style>
</html>
<behavior class="spt_sidebar_top" event="load"><![CDATA[
  spt.task_api = spt.task_api || {};
  spt.task_api.sidebar = spt.task_api.sidebar || {};
  spt.task_api.sidebar.status_colors = bvr.kwargs.status_colors;

  var top = bvr.src_el;

  spt.task_api.sidebar.select_task = function(src_el) {
    var userTop = src_el.getParent(".spt_user_top");
    var content = userTop.getElement(".spt_user_content");

    var task_code = src_el.getAttribute("spt_task_code");
    if (content.getAttribute("spt_task_code") == task_code) return;

    var sidebarTop = src_el.getParent(".spt_sidebar_top");
    var selects = sidebarTop.getElements(".spt_select_div")
    for (var i = 0; i < selects.length; i++) {
      selects[i].removeClass("spt_task_item_selected");
      selects[i].addClass("spt_task_item_unselected");
    }

    var select = src_el.getElement(".spt_select_div");
    select.addClass("spt_task_item_selected");
    select.removeClass("spt_task_item_unselected");

    var class_name = 'tactic.ui.panel.CustomLayoutWdg';
    var search_key = src_el.getAttribute("spt_search_key");
    var kwargs = {
      view: "job.home.user.task_detail",
      search_key: search_key,
    }

    on_complete = function() {
      content.removeClass("no-selected-tasks");
      content.setAttribute("spt_task_code", task_code);

      var userTop = bvr.src_el.getParent(".spt_user_top");
      var detailTop = userTop.getElement(".spt_task_detail_tabs");

      //TODO: not sure what should happen if detailTop is undefined.
      // Let's ask Frank.
      if (detailTop === null)
          return;

      var paddingTop = detailTop.getStyle("padding-top");
      paddingTop = parseInt(paddingTop.slice(0, -2));

      detailTop.addClass("spt_window_resize");
      detailTop.setAttribute("spt_window_resize_offset", 128 + paddingTop);
      detailTop.setAttribute("spt_window_resize_attr", "max-height");
      window.onresize();

      // hardcoded number for now
      if (paddingTop < 50) return;

      var detailTitle = userTop.getElement(".spt_task_detail_title");
      detailTitle.addClass("spt_window_resize");
      detailTitle.setAttribute("spt_window_resize_xoffset", 302);

      //configure scrolling
      var on_scroll = function(event){
        var deltaY = detailTop.scrollTop - detailTop.prevTop;
        if (detailTop.scrollTop != 0 && deltaY > 0) {
          downAction();
        } else if (detailTop.scrollTop == 0 && deltaY < 0) {
          upAction();
        }
        detailTop.prevTop = detailTop.scrollTop;
      }; 
 
      function downAction() {
        detailTitle.removeClass('detail-open');
        detailTitle.addClass('detail-collapse');
      }
  
      function upAction() {
        detailTitle.removeClass('detail-collapse');
        detailTitle.addClass('detail-open');
      }

      setTimeout(function(){ 
        detailTop.addEventListener('wheel', on_scroll)
      }, 100);

      setTimeout(function(){ 
        detailTop.addEventListener('scroll', on_scroll)
      }, 100);
    }

    spt.panel.load(content, class_name, kwargs, {}, {callback: on_complete});
  }


  spt.task_api.sidebar.show_tasks = function() {
    var taskItems = bvr.src_el.getElements(".spt_task_item");
    taskItems.forEach(function(taskItem){
      taskItem.setStyle("display", "");
    });

    var taskGroups = bvr.src_el.getElements(".spt_task_group");
    taskGroups.forEach(function(taskGroup){
      taskGroup.setStyle("display", "");
    });
  }
  
  spt.task_api.sidebar.filter_tasks = function() {
    var dropdown_data = bvr.src_el.dropdown_data || {};
    var attributes = Object.keys(dropdown_data);

    var taskItems = bvr.src_el.getElements(".spt_task_item");
    taskItems.forEach(function(taskItem){
      var taskSection = taskItem.getParent(".spt_task_section");
      var taskGroup = taskSection.getElement(".spt_task_group");

      var showItem = true;
      for (var i=0; i<attributes.length; i++) {
        var attribute = attributes[i];
        var filter_data = dropdown_data[attribute];
        var filteredValue = taskItem.getAttribute(attribute);
        var showItem = showItem && filter_data[filteredValue];
      }
        
      if (showItem) {
        taskItem.setStyle("display", "");
        taskGroup.setStyle("display", "");
      }
      else {
        taskItem.setStyle("display", "none");
        var visibleChildren = taskSection.querySelectorAll(".spt_task_item:not([style*='display:none']):not([style*='display: none'])");
        if (visibleChildren.length == 0) taskGroup.setStyle("display", "none");
      }
    });
  }

  spt.task_api.sidebar.switch_filter_tab = function(src_el) {
    var tabClass = src_el.getAttribute("spt_tab_class");
    var dropdown = src_el.getParent(".spt_task_filter_dropdown");

    var tab = dropdown.getElement("."+tabClass);
    var selectedTab = dropdown.getElement(".selected-tab");
    if (tab === selectedTab) return;
    tab.addClass("selected-tab");
    selectedTab.removeClass("selected-tab");

    var selectedHeader = dropdown.getElement(".selected-header");
    src_el.addClass("selected-header");
    selectedHeader.removeClass("selected-header");
  }

  spt.task_api.sidebar.hide = function(src_el, noAnim) {
    var top = src_el.getParent(".spt_user_top");
    var sidebarTop = top.getElement(".spt_sidebar");
    var contentTop = top.getElement(".spt_user_content");
    var showBtn = top.getElement(".spt_show_sidebar");

    if (noAnim) {
      sidebarTop.setStyle("transition", "0s");
      contentTop.setStyle("transition", "0s");
    } else {
      sidebarTop.setStyle("transition", "0.5s");
      contentTop.setStyle("transition", "0.5s");
    }

    sidebarTop.setStyle("left", "-300");
    contentTop.setStyle("margin-left", "0");
    showBtn.setStyle("display", "");
  }


  spt.task_api.sidebar.show = function(src_el, noAnim) {
    var top = bvr.src_el.getParent(".spt_user_top");
    var sidebarTop = top.getElement(".spt_sidebar");
    var contentTop = top.getElement(".spt_user_content");
    var showBtn = top.getElement(".spt_show_sidebar");

    if (noAnim) {
      sidebarTop.setStyle("transition", "0s");
      contentTop.setStyle("transition", "0s");
    } else {
      sidebarTop.setStyle("transition", "0.5s");
      contentTop.setStyle("transition", "0.5s");
    }

    sidebarTop.setStyle("left", "0px");
    contentTop.setStyle("margin-left", "300px");
    showBtn.setStyle("display", "none");
  }
  

  // no tasks (disabled)
  var no_tasks = bvr.kwargs.no_tasks;
  if (no_tasks) {
    var userTop = top.getParent(".spt_user_top");
    var userContent = userTop.getElement(".spt_user_content");
    //userContent.addClass("no-tasks-background");
    //bvr.kwargs.sidebar_collapsed = true;
  }

  // tasks
  var userTop = bvr.src_el.getParent(".spt_user_top");
  var content = userTop.getElement(".spt_user_content");
  var task_codes = bvr.kwargs.task_codes;
  var existing_task_code = content.getAttribute("spt_task_code");
  if (existing_task_code && existing_task_code != "" && task_codes.contains(existing_task_code)) return;

  var current_task_code = bvr.kwargs.current_task_code;
  var items = bvr.src_el.getElements(".spt_task_item");
  items.forEach( function(item) {
      if (item.getAttribute("spt_task_code") == current_task_code) {
          spt.task_api.sidebar.select_task(item);
      }
  } )
  
  // default behaviors
  var sidebar_collapsed = bvr.kwargs.sidebar_collapsed;
  if (["True", "true", true].contains(sidebar_collapsed)) spt.task_api.sidebar.hide(bvr.src_el, true);

]]></behavior>


<behavior class="spt_task_item"><![CDATA[
  spt.task_api.sidebar.select_task(bvr.src_el);
]]></behavior>


<behavior class="spt_task_filter"><![CDATA[
  var top = bvr.src_el.getParent(".spt_sidebar_toolbar_right");
  var dropdown = top.getElement(".spt_task_filter_dropdown");
  bvr.src_el.setStyle("box-shadow", "0 2px 4px 0 rgba(0, 0, 0, 0.05)");
    
  dropdown.setStyle("display", "");
  spt.body.add_focus_element(dropdown);
]]></behavior>


<behavior class="spt_filter_container" event="mouseenter"><![CDATA[
  var sidebarTop = bvr.src_el.getParent(".spt_sidebar_top");
  if (!sidebarTop.selected) return;

  var cancel = sidebarTop.getElement(".spt_cancel_filter");
  cancel.setStyle("display", "");
]]></behavior>


<behavior class="spt_filter_container" event="mouseleave"><![CDATA[
  var sidebarTop = bvr.src_el.getParent(".spt_sidebar_top");
  if (!sidebarTop.selected) return;

  var cancel = sidebarTop.getElement(".spt_cancel_filter");
  cancel.setStyle("display", "none");
]]></behavior>


<behavior class="spt_task_filter_dropdown" event="load"><![CDATA[

  bvr.src_el.on_complete = function(el) {
    var sidebarTop = el.getParent(".spt_sidebar_top");
    var dropdown_data = sidebarTop.dropdown_data || {};

    var filterTabs = sidebarTop.getElements(".spt_task_filter_tab")
    filterTabs.forEach(function(filterTab){
      var attribute = filterTab.attribute;
      
      var filter_data = dropdown_data[attribute];
      spt.task_api.sidebar.reset_options(filterTab, filter_data);
    });

    var filter = sidebarTop.getElement(".spt_task_filter");
    filter.setStyle("box-shadow", "");

    el.setStyle("display", "none");
  }
]]></behavior>


<behavior class="spt_filter_tab_header"><![CDATA[
  spt.task_api.sidebar.switch_filter_tab(bvr.src_el);
]]></behavior>


<behavior class="spt_cancel_filter"><![CDATA[
  var sidebarTop = bvr.src_el.getParent(".spt_sidebar_top");

  var filterTabs = sidebarTop.getElements(".spt_task_filter_tab")
  filterTabs.forEach(function(filterTab){
    spt.task_api.sidebar.select_all(filterTab, true);
  });
  spt.task_api.sidebar.show_tasks();
  sidebarTop.dropdown_data = {};

  var filter = sidebarTop.getElement(".spt_task_filter");
  filter.setStyle("background", "");
  sidebarTop.selected = false;

  bvr.src_el.setStyle("display", "none");
]]></behavior>


<behavior class="spt_task_sort"><![CDATA[
  var top = bvr.src_el.getParent(".spt_sidebar");
  var container = top.getElement(".spt_sections_container");
  var sections = top.getElements(".spt_task_section");
  var icon = bvr.src_el.getElement("i");

  var classes = icon.classList;
  icon.removeClass(classes[classes.length-1]);

  if (bvr.src_el.toggle) {
    icon.addClass("fa-sort-down");
    bvr.src_el.setAttribute("title", "Sort dates descending");
    bvr.src_el.toggle = false;
  }
  else {
    icon.addClass("fa-sort-up");
    bvr.src_el.setAttribute("title", "Sort dates ascending");
    bvr.src_el.toggle = true;
  }

  container.innerHtml = "";
  sections.reverse();
  for (var i=0; i<sections.length; i++) {
    container.appendChild(sections[i]);
  }
]]></behavior>


<behavior class="spt_hide_sidebar"><![CDATA[
  spt.task_api.sidebar.hide(bvr.src_el);
]]></behavior>
</job.home.user.sidebar>
</config>""")
insert.set_value('view', """job.home.user.sidebar""")
#-- End Entry --#

